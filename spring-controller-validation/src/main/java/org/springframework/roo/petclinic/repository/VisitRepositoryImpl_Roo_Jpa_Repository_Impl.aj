// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springframework.roo.petclinic.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.roo.petclinic.domain.Pet;
import org.springframework.roo.petclinic.domain.QVisit;
import org.springframework.roo.petclinic.domain.Vet;
import org.springframework.roo.petclinic.domain.Visit;
import org.springframework.roo.petclinic.repository.VisitRepositoryCustom;
import org.springframework.roo.petclinic.repository.VisitRepositoryImpl;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect VisitRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: VisitRepositoryImpl implements VisitRepositoryCustom;
    
    declare @type: VisitRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.VISIT_DATE = "visitDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.PET = "pet";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.VET = "vet";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VisitRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Visit> VisitRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QVisit visit = QVisit.visit;
        
        JPQLQuery<Visit> query = from(visit);
        
        Path<?>[] paths = new Path<?>[] {visit.description,visit.visitDate,visit.pet,visit.vet,visit.createdDate,visit.createdBy,visit.modifiedDate,visit.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, visit.description)
			.map(VISIT_DATE, visit.visitDate)
			.map(PET, visit.pet)
			.map(VET, visit.vet)
			.map(CREATED_DATE, visit.createdDate)
			.map(CREATED_BY, visit.createdBy)
			.map(MODIFIED_DATE, visit.modifiedDate)
			.map(MODIFIED_BY, visit.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, visit);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Visit> VisitRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QVisit visit = QVisit.visit;
        
        JPQLQuery<Visit> query = from(visit);
        
        Path<?>[] paths = new Path<?>[] {visit.description,visit.visitDate,visit.pet,visit.vet,visit.createdDate,visit.createdBy,visit.modifiedDate,visit.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(visit.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, visit.description)
			.map(VISIT_DATE, visit.visitDate)
			.map(PET, visit.pet)
			.map(VET, visit.vet)
			.map(CREATED_DATE, visit.createdDate)
			.map(CREATED_BY, visit.createdBy)
			.map(MODIFIED_DATE, visit.modifiedDate)
			.map(MODIFIED_BY, visit.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, visit);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pet
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Visit> VisitRepositoryImpl.findByPet(Pet pet, GlobalSearch globalSearch, Pageable pageable) {
        
        QVisit visit = QVisit.visit;
        
        JPQLQuery<Visit> query = from(visit);
        
        Assert.notNull(pet, "pet is required");
        
        query.where(visit.pet.eq(pet));
        Path<?>[] paths = new Path<?>[] {visit.description,visit.visitDate,visit.pet,visit.vet,visit.createdDate,visit.createdBy,visit.modifiedDate,visit.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, visit.description)
			.map(VISIT_DATE, visit.visitDate)
			.map(PET, visit.pet)
			.map(VET, visit.vet)
			.map(CREATED_DATE, visit.createdDate)
			.map(CREATED_BY, visit.createdBy)
			.map(MODIFIED_DATE, visit.modifiedDate)
			.map(MODIFIED_BY, visit.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, visit);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param vet
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Visit> VisitRepositoryImpl.findByVet(Vet vet, GlobalSearch globalSearch, Pageable pageable) {
        
        QVisit visit = QVisit.visit;
        
        JPQLQuery<Visit> query = from(visit);
        
        Assert.notNull(vet, "vet is required");
        
        query.where(visit.vet.eq(vet));
        Path<?>[] paths = new Path<?>[] {visit.description,visit.visitDate,visit.pet,visit.vet,visit.createdDate,visit.createdBy,visit.modifiedDate,visit.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, visit.description)
			.map(VISIT_DATE, visit.visitDate)
			.map(PET, visit.pet)
			.map(VET, visit.vet)
			.map(CREATED_DATE, visit.createdDate)
			.map(CREATED_BY, visit.createdBy)
			.map(MODIFIED_DATE, visit.modifiedDate)
			.map(MODIFIED_BY, visit.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, visit);
    }
    
}
