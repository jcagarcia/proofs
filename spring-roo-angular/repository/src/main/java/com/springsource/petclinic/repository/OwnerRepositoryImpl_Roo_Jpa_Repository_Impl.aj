// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.springsource.petclinic.model.Owner;
import com.springsource.petclinic.model.QOwner;
import com.springsource.petclinic.repository.OwnerRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OwnerRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: OwnerRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.FIRST_NAME = "firstName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.LAST_NAME = "lastName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.CITY = "city";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.TELEPHONE = "telephone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.HOME_PAGE = "homePage";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.EMAIL = "email";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OwnerRepositoryImpl.BIRTH_DAY = "birthDay";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Owner> OwnerRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QOwner owner = QOwner.owner;
        
        JPQLQuery<Owner> query = from(owner);
        
        Path<?>[] paths = new Path<?>[] {owner.firstName,owner.lastName,owner.address,owner.city,owner.telephone,owner.homePage,owner.email,owner.birthDay};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, owner.firstName)
			.map(LAST_NAME, owner.lastName)
			.map(ADDRESS, owner.address)
			.map(CITY, owner.city)
			.map(TELEPHONE, owner.telephone)
			.map(HOME_PAGE, owner.homePage)
			.map(EMAIL, owner.email)
			.map(BIRTH_DAY, owner.birthDay);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, owner);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Owner> OwnerRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QOwner owner = QOwner.owner;
        
        JPQLQuery<Owner> query = from(owner);
        
        Path<?>[] paths = new Path<?>[] {owner.firstName,owner.lastName,owner.address,owner.city,owner.telephone,owner.homePage,owner.email,owner.birthDay};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(owner.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FIRST_NAME, owner.firstName)
			.map(LAST_NAME, owner.lastName)
			.map(ADDRESS, owner.address)
			.map(CITY, owner.city)
			.map(TELEPHONE, owner.telephone)
			.map(HOME_PAGE, owner.homePage)
			.map(EMAIL, owner.email)
			.map(BIRTH_DAY, owner.birthDay);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, owner);
    }
    
}
