// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springframework.roo.petclinic.repository;

import static org.assertj.core.api.Assertions.assertThat;

import io.springlets.data.domain.GlobalSearch;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.roo.petclinic.config.SpringDataJpaDetachableRepositoryConfiguration;
import org.springframework.roo.petclinic.dod.DataOnDemandConfiguration;
import org.springframework.roo.petclinic.domain.Owner;
import org.springframework.roo.petclinic.domain.dod.OwnerDataOnDemand;
import org.springframework.roo.petclinic.repository.OwnerRepository;
import org.springframework.roo.petclinic.repository.OwnerRepositoryIT;
import org.springframework.test.context.junit4.SpringRunner;

privileged aspect OwnerRepositoryIT_Roo_RepositoryJpaIntegrationTest {
    
    declare @type: OwnerRepositoryIT: @RunWith(SpringRunner.class);
    
    declare @type: OwnerRepositoryIT: @DataJpaTest;
    
    declare @type: OwnerRepositoryIT: @Import({ DataOnDemandConfiguration.class, SpringDataJpaDetachableRepositoryConfiguration.class });
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Rule
    public ExpectedException OwnerRepositoryIT.thrown = ExpectedException.none();
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Autowired
    private OwnerRepository OwnerRepositoryIT.repository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Autowired
    private OwnerDataOnDemand OwnerRepositoryIT.dod;
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return OwnerRepository
     */
    public OwnerRepository OwnerRepositoryIT.getRepository() {
        return repository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return OwnerDataOnDemand
     */
    public OwnerDataOnDemand OwnerRepositoryIT.getDod() {
        return dod;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Before
    public void OwnerRepositoryIT.checkDataOnDemandHasInitializedCorrectly() {
        assertThat(getDod().getRandomOwner())
            .as("Check data on demand for 'Owner' initializes correctly by getting a random Owner")
            .isNotNull();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.countShouldReturnExpectedValue() {
        // Verify
        assertThat(getRepository().count()).as("Check there are available 'Owner' entries").isGreaterThan(0);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.findOneShouldReturnExistingOwner() {
        // Setup
        Long id = getRandomOwnerId();
        
        // Exercise
        Owner owner = getRepository().findOne(id);
        
        // Verify
        assertThat(owner).as("Check that findOne illegally returned null for id %s", id).isNotNull();
        assertThat(id).as("Check the identifier of the found 'Owner' is the same used to look for it")
            .isEqualTo(owner.getId());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.findAllShouldReturnAllOwners() {
        // Setup
        assertThat(getRepository().count())
            .as("Check the number of entries is not too big (250 entries). "
                + "If it is, please review the tests so it doesn't take too long to run them")
            .isLessThan(250);
        
        // Exercise
        List<Owner> result = getRepository().findAll();
        
        // Verify
        assertThat(result).as("Check 'findAll' returns a not null list of entries").isNotNull();
        assertThat(result.size()).as("Check 'findAll' returns a not empty list of entries")
            .isGreaterThan(0);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.persistShouldGenerateIdValue() {
        // Setup
        // Exercise
        Owner owner = getDod().getNewRandomTransientOwner();
        
        // Verify
        assertThat(owner).as("Check the Data on demand generated a new non null 'Owner'").isNotNull();
        assertThat(owner.getId()).as("Check the Data on demand generated a new 'Owner' whose id is null")
            .isNull();
        try {
            owner = getRepository().saveAndFlush(owner);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter
                .hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".")
                    .append(cv.getPropertyPath()).append(": ").append(cv.getMessage())
                    .append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        assertThat(owner.getId()).as("Check a 'Owner' (%s) id is not null after been persisted", owner)
            .isNotNull();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.deleteShouldMakeOwnerUnavailable() {
        // Setup
        Long id = getRandomOwnerId();
        Owner owner = getRepository().findOne(id);
        
        // Exercise
        getRepository().delete(owner);
        
        // Verify
        assertThat(getRepository().findOne(id))
        .as("Check the deleted 'Owner' %s is no longer available with 'findOne'", owner).isNull();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.findAllCustomNotFilteredNotPagedShouldReturnAllOwners() {
        // Exercise
        Page<Owner> all = getRepository().findAll((GlobalSearch) null, new PageRequest(0, getDod().getSize()));
        
        // Verify
        assertThat(all.getNumberOfElements())
            .as("Check 'findAll' with null 'GlobalSearch' and no pagination returns all entries")
            .isEqualTo(getDod().getSize());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void OwnerRepositoryIT.findAllCustomNotFilteredPagedShouldReturnAOwnersPage() {
        // Exercise
        Page<Owner> all = getRepository().findAll((GlobalSearch) null, new PageRequest(0, 3));
        
        // Verify
        assertThat(all.getNumberOfElements())
            .as("Check result number is not greater than the page size").isLessThanOrEqualTo(3);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    private Long OwnerRepositoryIT.getRandomOwnerId() {
        Owner owner = getDod().getRandomOwner();
        Long id = owner.getId();
        assertThat(id).as("Check the Data on demand generated a 'Owner' with an identifier").isNotNull();
        return id;
    }
    
}
